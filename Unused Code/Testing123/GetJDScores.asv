function Button_ScoresJD = GetJDScores(N_Arms, Change_Rng, ExclusiveIndex, Initialize)
    persistent means std_devs correlation_matrix

    if ~exist("Initialize", "var"); Initialize = false; end

    if Initialize || isempty(means) || isempty(std_devs) || isempty(correlation_matrix)
        % Initialize means and standard deviations for the arms
        means = floor(5 + (95-5) * rand(1, N_Arms));   % Random means between 5 and 95
        std_devs = randi([1, 3], 1, N_Arms);    % Random std devs chosen from 1, 2, or 3
        
        % Define the correlation matrix for the exclusive arms
        % Assume exclusive arms are 1 and 4
        correlation_matrix = eye(N_Arms);
        correlation_matrix(ExclusiveIndex(1), ExclusiveIndex(2)) = 0.8; % Desired correlation
        correlation_matrix(ExclusiveIndex(2), ExclusiveIndex(1)) = 0.8; % Symmetric correlation
    else
        % Update the means of the arms based on the given probability
        for arm = 1:N_Arms
            % Determine if the arm's mean should change
            if rand() < Change_Rng
                if ismember(arm, ExclusiveIndex)
                    % Update the means of the exclusive arms jointly
                    mu = [means(ExclusiveIndex(1)), means(ExclusiveIndex(2))];
                    sigma = [std_devs(ExclusiveIndex(1)), std_devs(ExclusiveIndex(2))];
                    cov_matrix = [sigma(1)^2, correlation_matrix(ExclusiveIndex(1), ExclusiveIndex(2)) * sigma(1) * sigma(2); ...
                                  correlation_matrix(ExclusiveIndex(2), ExclusiveIndex(1)) * sigma(1) * sigma(2), sigma(2)^2];
                    
                    new_means = mvnrnd(mu, cov_matrix);
                    means(ExclusiveIndex(1)) = round(new_means(1));
                    means(ExclusiveIndex(2)) = round(new_means(2));
                else
                    means(arm) = floor(5 + (95-5) * rand());
                end
            end
        end
    end

    % Generate rewards
    rewards = zeros(1, N_Arms);
    for arm = 1:N_Arms
        % Generate rewards for each arm based on updated means
        rewards(arm) = round(means(arm) + std_devs(arm) * randn());
        
        % Clamp the rewards to be within the range [1, 100]
        rewards(arm) = max(1, min(100, rewards(arm)));
    end

    Button_ScoresJD = rewards;
end
